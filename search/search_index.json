{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"M42PL - Core commands M42PL core commands are akin to a standard library. Although M42PL can run without the core commands, most deployment will include the m42pl-commands package. Commands are documented under the Commands section, and are regrouped by tags on the Commands type page . About this documentation Commands documentation is generated automatically using the following M42PL script: | readfile `joinpath('templates', 'command_.md.j2')` as template | assert field(render_mode) and field(render_path) and length(template) > 0 | foreach [ | mpl_commands | where not match(command.alias, '^_.*') | stats values(command.aliases) as command.aliases, first(command.type) as command.type, first(command.syntax) as command.syntax, first(command.schema) as command.schema, first(template) as command.template, first(render_mode) as render_mode, first(render_path) as render_path, by command.about | eval command.alias = at(command.aliases, 0) | encode command.schema with 'json' as command.jsonschema | foreach [ | readfile `joinpath('templates', 'command_' + command.alias + '.md.j2')` as command.template ] | jinja src=command.template dest=command.render searchpath='templates' | write command.render to `joinpath(render_path, 'command_' + command.alias + '.md')` | ignore output buffer=1 header=yes ]","title":"Home"},{"location":"#m42pl-core-commands","text":"M42PL core commands are akin to a standard library. Although M42PL can run without the core commands, most deployment will include the m42pl-commands package. Commands are documented under the Commands section, and are regrouped by tags on the Commands type page .","title":"M42PL - Core commands"},{"location":"#about-this-documentation","text":"Commands documentation is generated automatically using the following M42PL script: | readfile `joinpath('templates', 'command_.md.j2')` as template | assert field(render_mode) and field(render_path) and length(template) > 0 | foreach [ | mpl_commands | where not match(command.alias, '^_.*') | stats values(command.aliases) as command.aliases, first(command.type) as command.type, first(command.syntax) as command.syntax, first(command.schema) as command.schema, first(template) as command.template, first(render_mode) as render_mode, first(render_path) as render_path, by command.about | eval command.alias = at(command.aliases, 0) | encode command.schema with 'json' as command.jsonschema | foreach [ | readfile `joinpath('templates', 'command_' + command.alias + '.md.j2')` as command.template ] | jinja src=command.template dest=command.render searchpath='templates' | write command.render to `joinpath(render_path, 'command_' + command.alias + '.md')` | ignore output buffer=1 header=yes ]","title":"About this documentation"},{"location":"tags/","text":"Commands type Each M42PL command have a specific type : GeneratingCommand generates (yields) events StreamingCommand process events BufferingCommand process multiple events at once MetaCommand operate on the pipelines instead of events Command are low-level commands, not intended for users BufferingCommand buffer fieldstats noout output print_stats Command script GeneratingCommand echo http_server kvitems kvread macros make mpl-server mpl_commands process readfile readlines server until url zmq_proxy zmq_pull zmq_sub MetaCommand delmacro ignore kvdelete kvwrite macro purgemacro StreamingCommand assert closemacro codecs cut decode delta encode eval expand extract_kv extract_map fields foreach grok head jinja jsonpath limit mpl-dispatcher multiproc-send parallel parse_json regex rename sleep split stats tag tailf where wrap write-append write ws_bcast xpath zmq_pub zmq_push","title":"Commands type"},{"location":"tags/#commands-type","text":"Each M42PL command have a specific type : GeneratingCommand generates (yields) events StreamingCommand process events BufferingCommand process multiple events at once MetaCommand operate on the pipelines instead of events Command are low-level commands, not intended for users","title":"Commands type"},{"location":"tags/#bufferingcommand","text":"buffer fieldstats noout output print_stats","title":"BufferingCommand"},{"location":"tags/#command","text":"script","title":"Command"},{"location":"tags/#generatingcommand","text":"echo http_server kvitems kvread macros make mpl-server mpl_commands process readfile readlines server until url zmq_proxy zmq_pull zmq_sub","title":"GeneratingCommand"},{"location":"tags/#metacommand","text":"delmacro ignore kvdelete kvwrite macro purgemacro","title":"MetaCommand"},{"location":"tags/#streamingcommand","text":"assert closemacro codecs cut decode delta encode eval expand extract_kv extract_map fields foreach grok head jinja jsonpath limit mpl-dispatcher multiproc-send parallel parse_json regex rename sleep split stats tag tailf where wrap write-append write ws_bcast xpath zmq_pub zmq_push","title":"StreamingCommand"},{"location":"commands/command_assert/","tags":["StreamingCommand"],"text":"assert Fails the pipeline if the given expression is false Aliases assert Synopsis | assert <expression> Schema { \"properties\": {} } Description Examples","title":"assert"},{"location":"commands/command_assert/#assert","text":"Fails the pipeline if the given expression is false","title":"assert"},{"location":"commands/command_assert/#aliases","text":"assert","title":"Aliases"},{"location":"commands/command_assert/#synopsis","text":"| assert <expression>","title":"Synopsis"},{"location":"commands/command_assert/#schema","text":"{ \"properties\": {} }","title":"Schema"},{"location":"commands/command_assert/#description","text":"","title":"Description"},{"location":"commands/command_assert/#examples","text":"","title":"Examples"},{"location":"commands/command_buffer/","tags":["BufferingCommand"],"text":"buffer Delays events processing Aliases buffer Synopsis | buffer [[size=]<buffer size>] [[showchunk=]<yes|no>] Schema { \"properties\": {} } Description Examples","title":"buffer"},{"location":"commands/command_buffer/#buffer","text":"Delays events processing","title":"buffer"},{"location":"commands/command_buffer/#aliases","text":"buffer","title":"Aliases"},{"location":"commands/command_buffer/#synopsis","text":"| buffer [[size=]<buffer size>] [[showchunk=]<yes|no>]","title":"Synopsis"},{"location":"commands/command_buffer/#schema","text":"{ \"properties\": {} }","title":"Schema"},{"location":"commands/command_buffer/#description","text":"","title":"Description"},{"location":"commands/command_buffer/#examples","text":"","title":"Examples"},{"location":"commands/command_closemacro/","tags":["StreamingCommand"],"text":"closemacro Close a macro Aliases closemacro Synopsis | closemacro Schema { \"properties\": {} } Description Examples","title":"closemacro"},{"location":"commands/command_closemacro/#closemacro","text":"Close a macro","title":"closemacro"},{"location":"commands/command_closemacro/#aliases","text":"closemacro","title":"Aliases"},{"location":"commands/command_closemacro/#synopsis","text":"| closemacro","title":"Synopsis"},{"location":"commands/command_closemacro/#schema","text":"{ \"properties\": {} }","title":"Schema"},{"location":"commands/command_closemacro/#description","text":"","title":"Description"},{"location":"commands/command_closemacro/#examples","text":"","title":"Examples"},{"location":"commands/command_codecs/","tags":["StreamingCommand"],"text":"codecs Returns available codecs Aliases codecs Synopsis | codecs Schema { \"properties\": { \"code\": { \"type\": \"object\", \"properties\": { \"alias\": { \"type\": \"string\", \"description\": \"Codec name\" }, \"about\": { \"type\": \"string\", \"description\": \"Codec info\" } } } } } Description Examples","title":"codecs"},{"location":"commands/command_codecs/#codecs","text":"Returns available codecs","title":"codecs"},{"location":"commands/command_codecs/#aliases","text":"codecs","title":"Aliases"},{"location":"commands/command_codecs/#synopsis","text":"| codecs","title":"Synopsis"},{"location":"commands/command_codecs/#schema","text":"{ \"properties\": { \"code\": { \"type\": \"object\", \"properties\": { \"alias\": { \"type\": \"string\", \"description\": \"Codec name\" }, \"about\": { \"type\": \"string\", \"description\": \"Codec info\" } } } } }","title":"Schema"},{"location":"commands/command_codecs/#description","text":"","title":"Description"},{"location":"commands/command_codecs/#examples","text":"","title":"Examples"},{"location":"commands/command_cut/","tags":["StreamingCommand"],"text":"cut Cut (split) a field using a regular expression Aliases cut split Synopsis | cut [field=]{field} [expr=]<regex> [[clean=]<yes|no>] Schema { \"properties\": { \"{field}\": { \"type\": \"array\", \"description\": \"Cut field\" } } } Description Examples","title":"cut"},{"location":"commands/command_cut/#cut","text":"Cut (split) a field using a regular expression","title":"cut"},{"location":"commands/command_cut/#aliases","text":"cut split","title":"Aliases"},{"location":"commands/command_cut/#synopsis","text":"| cut [field=]{field} [expr=]<regex> [[clean=]<yes|no>]","title":"Synopsis"},{"location":"commands/command_cut/#schema","text":"{ \"properties\": { \"{field}\": { \"type\": \"array\", \"description\": \"Cut field\" } } }","title":"Schema"},{"location":"commands/command_cut/#description","text":"","title":"Description"},{"location":"commands/command_cut/#examples","text":"","title":"Examples"},{"location":"commands/command_decode/","tags":["StreamingCommand"],"text":"decode Decodes event or event field Aliases decode Synopsis | decode {src field} [as {dest field}] with <codec> | {src field} with <codec> [as {dest field}] | [[codec=]<codec>] [[src=]{src field}] [[dest=]{dest field}] Schema { \"properties\": { \"{dest_field}\": { \"description\": \"Decoded field\" } } } Description Examples","title":"decode"},{"location":"commands/command_decode/#decode","text":"Decodes event or event field","title":"decode"},{"location":"commands/command_decode/#aliases","text":"decode","title":"Aliases"},{"location":"commands/command_decode/#synopsis","text":"| decode {src field} [as {dest field}] with <codec> | {src field} with <codec> [as {dest field}] | [[codec=]<codec>] [[src=]{src field}] [[dest=]{dest field}]","title":"Synopsis"},{"location":"commands/command_decode/#schema","text":"{ \"properties\": { \"{dest_field}\": { \"description\": \"Decoded field\" } } }","title":"Schema"},{"location":"commands/command_decode/#description","text":"","title":"Description"},{"location":"commands/command_decode/#examples","text":"","title":"Examples"},{"location":"commands/command_delmacro/","tags":["MetaCommand"],"text":"delmacro Delete a macro Aliases delmacro Synopsis | delmacro {name} Schema { \"properties\": {} } Description Examples","title":"delmacro"},{"location":"commands/command_delmacro/#delmacro","text":"Delete a macro","title":"delmacro"},{"location":"commands/command_delmacro/#aliases","text":"delmacro","title":"Aliases"},{"location":"commands/command_delmacro/#synopsis","text":"| delmacro {name}","title":"Synopsis"},{"location":"commands/command_delmacro/#schema","text":"{ \"properties\": {} }","title":"Schema"},{"location":"commands/command_delmacro/#description","text":"","title":"Description"},{"location":"commands/command_delmacro/#examples","text":"","title":"Examples"},{"location":"commands/command_delta/","tags":["StreamingCommand"],"text":"delta Compute the difference between the same field of two consecutive events Aliases delta Synopsis | delta [field=]<field> Schema {} Description Examples","title":"delta"},{"location":"commands/command_delta/#delta","text":"Compute the difference between the same field of two consecutive events","title":"delta"},{"location":"commands/command_delta/#aliases","text":"delta","title":"Aliases"},{"location":"commands/command_delta/#synopsis","text":"| delta [field=]<field>","title":"Synopsis"},{"location":"commands/command_delta/#schema","text":"{}","title":"Schema"},{"location":"commands/command_delta/#description","text":"","title":"Description"},{"location":"commands/command_delta/#examples","text":"","title":"Examples"},{"location":"commands/command_echo/","tags":["GeneratingCommand"],"text":"echo Returns the received event or an empty event Aliases echo Synopsis | echo [[count=]<count>] Schema { \"properties\": {} } Description Examples","title":"echo"},{"location":"commands/command_echo/#echo","text":"Returns the received event or an empty event","title":"echo"},{"location":"commands/command_echo/#aliases","text":"echo","title":"Aliases"},{"location":"commands/command_echo/#synopsis","text":"| echo [[count=]<count>]","title":"Synopsis"},{"location":"commands/command_echo/#schema","text":"{ \"properties\": {} }","title":"Schema"},{"location":"commands/command_echo/#description","text":"","title":"Description"},{"location":"commands/command_echo/#examples","text":"","title":"Examples"},{"location":"commands/command_encode/","tags":["StreamingCommand"],"text":"encode Encodes event or event field Aliases encode Synopsis | encode {src field} [as {dest field}] with <codec> | {src field} with <codec> [as {dest field}] | [[codec=]<codec>] [[src=]{src field}] [[dest=]{dest field}] Schema { \"properties\": { \"{dest_field}\": { \"description\": \"Encoded field\" } } } Description Examples","title":"encode"},{"location":"commands/command_encode/#encode","text":"Encodes event or event field","title":"encode"},{"location":"commands/command_encode/#aliases","text":"encode","title":"Aliases"},{"location":"commands/command_encode/#synopsis","text":"| encode {src field} [as {dest field}] with <codec> | {src field} with <codec> [as {dest field}] | [[codec=]<codec>] [[src=]{src field}] [[dest=]{dest field}]","title":"Synopsis"},{"location":"commands/command_encode/#schema","text":"{ \"properties\": { \"{dest_field}\": { \"description\": \"Encoded field\" } } }","title":"Schema"},{"location":"commands/command_encode/#description","text":"","title":"Description"},{"location":"commands/command_encode/#examples","text":"","title":"Examples"},{"location":"commands/command_eval/","tags":["StreamingCommand"],"text":"eval Evaluate a Python expression and assign result to a field Aliases eval evaluate Synopsis | eval <field_name> = <expression> [, ...] Schema { \"additionalProperties\": { \"description\": \"Evaluated fields\" } } Description eval evaluates an expression and returns its results. The expression is evaluated by the underlying Python interpreter. Unlike standard evaluation, eval uses a set of custom functions and a custom variables resolution mechanism. Functions are documented here . Examples | make showinfo=yes | eval some.field = id + 1 | commands | eval command.name = at(command.aliases, 0), command.markdown = joinpath('markdown', at(command.aliases, 0) + '.md')","title":"eval"},{"location":"commands/command_eval/#eval","text":"Evaluate a Python expression and assign result to a field","title":"eval"},{"location":"commands/command_eval/#aliases","text":"eval evaluate","title":"Aliases"},{"location":"commands/command_eval/#synopsis","text":"| eval <field_name> = <expression> [, ...]","title":"Synopsis"},{"location":"commands/command_eval/#schema","text":"{ \"additionalProperties\": { \"description\": \"Evaluated fields\" } }","title":"Schema"},{"location":"commands/command_eval/#description","text":"eval evaluates an expression and returns its results. The expression is evaluated by the underlying Python interpreter. Unlike standard evaluation, eval uses a set of custom functions and a custom variables resolution mechanism. Functions are documented here .","title":"Description"},{"location":"commands/command_eval/#examples","text":"| make showinfo=yes | eval some.field = id + 1 | commands | eval command.name = at(command.aliases, 0), command.markdown = joinpath('markdown', at(command.aliases, 0) + '.md')","title":"Examples"},{"location":"commands/command_expand/","tags":["StreamingCommand"],"text":"expand Duplicate event for each value of the given field Aliases expand mvexpand Synopsis | expand [field=]{field name} Schema { \"additionalProperties\": { \"description\": \"Source event properties\" } } Description Examples","title":"expand"},{"location":"commands/command_expand/#expand","text":"Duplicate event for each value of the given field","title":"expand"},{"location":"commands/command_expand/#aliases","text":"expand mvexpand","title":"Aliases"},{"location":"commands/command_expand/#synopsis","text":"| expand [field=]{field name}","title":"Synopsis"},{"location":"commands/command_expand/#schema","text":"{ \"additionalProperties\": { \"description\": \"Source event properties\" } }","title":"Schema"},{"location":"commands/command_expand/#description","text":"","title":"Description"},{"location":"commands/command_expand/#examples","text":"","title":"Examples"},{"location":"commands/command_extract_kv/","tags":["StreamingCommand"],"text":"extract_kv Extract keys/values pairs from a given field Aliases extract_kv extract_kvs Synopsis | extract_kv [field=]<source field> [[kvdelim=]<key/value delimiter>] [[pairdelim=]<key/value pairs delimiter>] [[dest=]<dest field>] Schema { \"properties\": {} } Description Examples","title":"extract_kv"},{"location":"commands/command_extract_kv/#extract_kv","text":"Extract keys/values pairs from a given field","title":"extract_kv"},{"location":"commands/command_extract_kv/#aliases","text":"extract_kv extract_kvs","title":"Aliases"},{"location":"commands/command_extract_kv/#synopsis","text":"| extract_kv [field=]<source field> [[kvdelim=]<key/value delimiter>] [[pairdelim=]<key/value pairs delimiter>] [[dest=]<dest field>]","title":"Synopsis"},{"location":"commands/command_extract_kv/#schema","text":"{ \"properties\": {} }","title":"Schema"},{"location":"commands/command_extract_kv/#description","text":"","title":"Description"},{"location":"commands/command_extract_kv/#examples","text":"","title":"Examples"},{"location":"commands/command_extract_map/","tags":["StreamingCommand"],"text":"extract_map Extract values from a given field. Aliases extract_map extract_maps Synopsis | extract_map [field=]<source field> [[headers=](headers)] [[prefix=]<key prefix>] [[delim=]<values delimiter>] [[dest=]<dest field>] Schema { \"properties\": {} } Description Examples","title":"extract_map"},{"location":"commands/command_extract_map/#extract_map","text":"Extract values from a given field.","title":"extract_map"},{"location":"commands/command_extract_map/#aliases","text":"extract_map extract_maps","title":"Aliases"},{"location":"commands/command_extract_map/#synopsis","text":"| extract_map [field=]<source field> [[headers=](headers)] [[prefix=]<key prefix>] [[delim=]<values delimiter>] [[dest=]<dest field>]","title":"Synopsis"},{"location":"commands/command_extract_map/#schema","text":"{ \"properties\": {} }","title":"Schema"},{"location":"commands/command_extract_map/#description","text":"","title":"Description"},{"location":"commands/command_extract_map/#examples","text":"","title":"Examples"},{"location":"commands/command_fields/","tags":["StreamingCommand"],"text":"fields Keep (+) or remove (-) the selected fields Aliases fields Synopsis | fields [+|-] field_name [, ...] Schema { \"properties\": {} } Description Examples","title":"fields"},{"location":"commands/command_fields/#fields","text":"Keep (+) or remove (-) the selected fields","title":"fields"},{"location":"commands/command_fields/#aliases","text":"fields","title":"Aliases"},{"location":"commands/command_fields/#synopsis","text":"| fields [+|-] field_name [, ...]","title":"Synopsis"},{"location":"commands/command_fields/#schema","text":"{ \"properties\": {} }","title":"Schema"},{"location":"commands/command_fields/#description","text":"","title":"Description"},{"location":"commands/command_fields/#examples","text":"","title":"Examples"},{"location":"commands/command_fieldstats/","tags":["BufferingCommand"],"text":"fieldstats Compute fields statistics Aliases fieldstats fieldsstats fstats Synopsis | fieldstats Schema { \"properties\": {} } Description Examples","title":"fieldstats"},{"location":"commands/command_fieldstats/#fieldstats","text":"Compute fields statistics","title":"fieldstats"},{"location":"commands/command_fieldstats/#aliases","text":"fieldstats fieldsstats fstats","title":"Aliases"},{"location":"commands/command_fieldstats/#synopsis","text":"| fieldstats","title":"Synopsis"},{"location":"commands/command_fieldstats/#schema","text":"{ \"properties\": {} }","title":"Schema"},{"location":"commands/command_fieldstats/#description","text":"","title":"Description"},{"location":"commands/command_fieldstats/#examples","text":"","title":"Examples"},{"location":"commands/command_foreach/","tags":["StreamingCommand"],"text":"foreach Run a sub-pipeline for each event Aliases foreach Synopsis | foreach <pipeline> Schema { \"properties\": {} } Description foreach runs a sub-pipeline for each event. it is mostly useful to chain generating commands. Examples Query an url for each event: | readline 'urls.txt' | foreach [ | curl url=line ]","title":"foreach"},{"location":"commands/command_foreach/#foreach","text":"Run a sub-pipeline for each event","title":"foreach"},{"location":"commands/command_foreach/#aliases","text":"foreach","title":"Aliases"},{"location":"commands/command_foreach/#synopsis","text":"| foreach <pipeline>","title":"Synopsis"},{"location":"commands/command_foreach/#schema","text":"{ \"properties\": {} }","title":"Schema"},{"location":"commands/command_foreach/#description","text":"foreach runs a sub-pipeline for each event. it is mostly useful to chain generating commands.","title":"Description"},{"location":"commands/command_foreach/#examples","text":"Query an url for each event: | readline 'urls.txt' | foreach [ | curl url=line ]","title":"Examples"},{"location":"commands/command_grok/","tags":["StreamingCommand"],"text":"grok Parse a field with a Grok expression Aliases grok Synopsis | grok {src} with <grok expression> [as|to {dest}] Schema { \"properties\": { \"{dest}\": { \"type\": \"object\" } } } Description Examples","title":"grok"},{"location":"commands/command_grok/#grok","text":"Parse a field with a Grok expression","title":"grok"},{"location":"commands/command_grok/#aliases","text":"grok","title":"Aliases"},{"location":"commands/command_grok/#synopsis","text":"| grok {src} with <grok expression> [as|to {dest}]","title":"Synopsis"},{"location":"commands/command_grok/#schema","text":"{ \"properties\": { \"{dest}\": { \"type\": \"object\" } } }","title":"Schema"},{"location":"commands/command_grok/#description","text":"","title":"Description"},{"location":"commands/command_grok/#examples","text":"","title":"Examples"},{"location":"commands/command_head/","tags":["StreamingCommand"],"text":"head Keep only the firsts events Aliases head Synopsis | head [[count=]<count>] Schema { \"properties\": {} } Description Examples","title":"head"},{"location":"commands/command_head/#head","text":"Keep only the firsts events","title":"head"},{"location":"commands/command_head/#aliases","text":"head","title":"Aliases"},{"location":"commands/command_head/#synopsis","text":"| head [[count=]<count>]","title":"Synopsis"},{"location":"commands/command_head/#schema","text":"{ \"properties\": {} }","title":"Schema"},{"location":"commands/command_head/#description","text":"","title":"Description"},{"location":"commands/command_head/#examples","text":"","title":"Examples"},{"location":"commands/command_http_server/","tags":["GeneratingCommand"],"text":"http_server Runs an HTTP server Aliases http_server server_http Synopsis | http_server [[host=]{host}] [[port]={port}] (<pipeline> | with 'method' on 'path' = <pipeline>, ...) Schema { \"properties\": { \"request\": { \"type\": \"object\", \"properties\": { \"url\": { \"type\": \"string\", \"description\": \"Requested URL\" }, \"host\": { \"type\": \"string\", \"description\": \"Server host\" }, \"path\": { \"type\": \"string\", \"description\": \"Requested path\" }, \"scheme\": { \"type\": \"string\", \"description\": \"Requested URL scheme\" }, \"jsdata\": { \"type\": \"object\", \"description\": \"Request JSON data\" }, \"query_string\": { \"type\": \"string\", \"description\": \"Requested URL query\" }, \"content_type\": { \"type\": \"string\", \"description\": \"Request content type\" }, \"content_length\": { \"type\": \"number\", \"description\": \"Request size\" } } } }, \"additionalProperties\": { \"description\": \"Response fields\" } } Description http_server starts an HTTP server and process each requests in the given pipelines. The server always returns (answers) the latest event processed, which is by default the client request. Examples Echo server: | http_server [ | output buffer=1 ] Process GET and POST requests: | http_server with 'GET' on '/objects/{name}' = [ | output buffer=1 | eval response = 'got some ' + at(split(path, '/'), -1) | fields response ], 'POST' on '/objects' = [ | fields jsdata | wrap 'stored' ] Set host and port: | http_server host='1.2.3.4' port=1234 [ | output buffer=1 ]","title":"http_server"},{"location":"commands/command_http_server/#http_server","text":"Runs an HTTP server","title":"http_server"},{"location":"commands/command_http_server/#aliases","text":"http_server server_http","title":"Aliases"},{"location":"commands/command_http_server/#synopsis","text":"| http_server [[host=]{host}] [[port]={port}] (<pipeline> | with 'method' on 'path' = <pipeline>, ...)","title":"Synopsis"},{"location":"commands/command_http_server/#schema","text":"{ \"properties\": { \"request\": { \"type\": \"object\", \"properties\": { \"url\": { \"type\": \"string\", \"description\": \"Requested URL\" }, \"host\": { \"type\": \"string\", \"description\": \"Server host\" }, \"path\": { \"type\": \"string\", \"description\": \"Requested path\" }, \"scheme\": { \"type\": \"string\", \"description\": \"Requested URL scheme\" }, \"jsdata\": { \"type\": \"object\", \"description\": \"Request JSON data\" }, \"query_string\": { \"type\": \"string\", \"description\": \"Requested URL query\" }, \"content_type\": { \"type\": \"string\", \"description\": \"Request content type\" }, \"content_length\": { \"type\": \"number\", \"description\": \"Request size\" } } } }, \"additionalProperties\": { \"description\": \"Response fields\" } }","title":"Schema"},{"location":"commands/command_http_server/#description","text":"http_server starts an HTTP server and process each requests in the given pipelines. The server always returns (answers) the latest event processed, which is by default the client request.","title":"Description"},{"location":"commands/command_http_server/#examples","text":"Echo server: | http_server [ | output buffer=1 ] Process GET and POST requests: | http_server with 'GET' on '/objects/{name}' = [ | output buffer=1 | eval response = 'got some ' + at(split(path, '/'), -1) | fields response ], 'POST' on '/objects' = [ | fields jsdata | wrap 'stored' ] Set host and port: | http_server host='1.2.3.4' port=1234 [ | output buffer=1 ]","title":"Examples"},{"location":"commands/command_ignore/","tags":["MetaCommand"],"text":"ignore Does nothing Aliases ignore pass comment Synopsis | ignore Schema { \"additionalProperties\": { \"description\": \"Source field properties\" } } Description Examples","title":"ignore"},{"location":"commands/command_ignore/#ignore","text":"Does nothing","title":"ignore"},{"location":"commands/command_ignore/#aliases","text":"ignore pass comment","title":"Aliases"},{"location":"commands/command_ignore/#synopsis","text":"| ignore","title":"Synopsis"},{"location":"commands/command_ignore/#schema","text":"{ \"additionalProperties\": { \"description\": \"Source field properties\" } }","title":"Schema"},{"location":"commands/command_ignore/#description","text":"","title":"Description"},{"location":"commands/command_ignore/#examples","text":"","title":"Examples"},{"location":"commands/command_jinja/","tags":["StreamingCommand"],"text":"jinja Renders a Jinja template Aliases jinja template_jinja jinja_template Synopsis | jinja [src=]{source field} [dest=]{destination field} [[searchpath=]<search path>] Schema { \"properties\": { \"{dest}\": { \"description\": \"Jinja-evaluated result\" } } } Description Examples","title":"jinja"},{"location":"commands/command_jinja/#jinja","text":"Renders a Jinja template","title":"jinja"},{"location":"commands/command_jinja/#aliases","text":"jinja template_jinja jinja_template","title":"Aliases"},{"location":"commands/command_jinja/#synopsis","text":"| jinja [src=]{source field} [dest=]{destination field} [[searchpath=]<search path>]","title":"Synopsis"},{"location":"commands/command_jinja/#schema","text":"{ \"properties\": { \"{dest}\": { \"description\": \"Jinja-evaluated result\" } } }","title":"Schema"},{"location":"commands/command_jinja/#description","text":"","title":"Description"},{"location":"commands/command_jinja/#examples","text":"","title":"Examples"},{"location":"commands/command_jsonpath/","tags":["StreamingCommand"],"text":"jsonpath Evaluate a JSONPath expression Aliases jsonpath jspath Synopsis | jsonpath <[expression=]expression> <[field=]source field>[[dest=]dest field] Schema { \"properties\": { \"{dest}\": { \"description\": \"Extracted field\" } } } Description Examples","title":"jsonpath"},{"location":"commands/command_jsonpath/#jsonpath","text":"Evaluate a JSONPath expression","title":"jsonpath"},{"location":"commands/command_jsonpath/#aliases","text":"jsonpath jspath","title":"Aliases"},{"location":"commands/command_jsonpath/#synopsis","text":"| jsonpath <[expression=]expression> <[field=]source field>[[dest=]dest field]","title":"Synopsis"},{"location":"commands/command_jsonpath/#schema","text":"{ \"properties\": { \"{dest}\": { \"description\": \"Extracted field\" } } }","title":"Schema"},{"location":"commands/command_jsonpath/#description","text":"","title":"Description"},{"location":"commands/command_jsonpath/#examples","text":"","title":"Examples"},{"location":"commands/command_kvdelete/","tags":["MetaCommand"],"text":"kvdelete Delete a KVStore entry Aliases kvdelete kv_delete Synopsis | kvdelete [key=]{key} Schema { \"properties\": {} } Description Examples","title":"kvdelete"},{"location":"commands/command_kvdelete/#kvdelete","text":"Delete a KVStore entry","title":"kvdelete"},{"location":"commands/command_kvdelete/#aliases","text":"kvdelete kv_delete","title":"Aliases"},{"location":"commands/command_kvdelete/#synopsis","text":"| kvdelete [key=]{key}","title":"Synopsis"},{"location":"commands/command_kvdelete/#schema","text":"{ \"properties\": {} }","title":"Schema"},{"location":"commands/command_kvdelete/#description","text":"","title":"Description"},{"location":"commands/command_kvdelete/#examples","text":"","title":"Examples"},{"location":"commands/command_kvitems/","tags":["GeneratingCommand"],"text":"kvitems Read a KVStore Aliases kvitems kv_items Synopsis | kvitems [[key=]{key}] Schema { \"properties\": { \"{key}\": { \"description\": \"Key value read from KVStore\" } } } Description Examples","title":"kvitems"},{"location":"commands/command_kvitems/#kvitems","text":"Read a KVStore","title":"kvitems"},{"location":"commands/command_kvitems/#aliases","text":"kvitems kv_items","title":"Aliases"},{"location":"commands/command_kvitems/#synopsis","text":"| kvitems [[key=]{key}]","title":"Synopsis"},{"location":"commands/command_kvitems/#schema","text":"{ \"properties\": { \"{key}\": { \"description\": \"Key value read from KVStore\" } } }","title":"Schema"},{"location":"commands/command_kvitems/#description","text":"","title":"Description"},{"location":"commands/command_kvitems/#examples","text":"","title":"Examples"},{"location":"commands/command_kvread/","tags":["GeneratingCommand"],"text":"kvread Read a KVStore key Aliases kvread kv_read Synopsis | kvread <key name> | <key name> as <field> | <field> = <key name> Schema { \"properties\": { \"{dest}\": { \"description\": \"Key value read from KVStore\" } } } Description Examples","title":"kvread"},{"location":"commands/command_kvread/#kvread","text":"Read a KVStore key","title":"kvread"},{"location":"commands/command_kvread/#aliases","text":"kvread kv_read","title":"Aliases"},{"location":"commands/command_kvread/#synopsis","text":"| kvread <key name> | <key name> as <field> | <field> = <key name>","title":"Synopsis"},{"location":"commands/command_kvread/#schema","text":"{ \"properties\": { \"{dest}\": { \"description\": \"Key value read from KVStore\" } } }","title":"Schema"},{"location":"commands/command_kvread/#description","text":"","title":"Description"},{"location":"commands/command_kvread/#examples","text":"","title":"Examples"},{"location":"commands/command_kvwrite/","tags":["MetaCommand"],"text":"kvwrite Set a KVStore key Aliases kvwrite kv_write Synopsis | kvwrite <key name> [=] <field> Schema { \"properties\": {} } Description Examples","title":"kvwrite"},{"location":"commands/command_kvwrite/#kvwrite","text":"Set a KVStore key","title":"kvwrite"},{"location":"commands/command_kvwrite/#aliases","text":"kvwrite kv_write","title":"Aliases"},{"location":"commands/command_kvwrite/#synopsis","text":"| kvwrite <key name> [=] <field>","title":"Synopsis"},{"location":"commands/command_kvwrite/#schema","text":"{ \"properties\": {} }","title":"Schema"},{"location":"commands/command_kvwrite/#description","text":"","title":"Description"},{"location":"commands/command_kvwrite/#examples","text":"","title":"Examples"},{"location":"commands/command_limit/","tags":["StreamingCommand"],"text":"limit Run a sub-pipeline for a limited amount of event Aliases limit Synopsis | limit [count=]<event count> <pipeline> Schema { \"properties\": {} } Description Examples","title":"limit"},{"location":"commands/command_limit/#limit","text":"Run a sub-pipeline for a limited amount of event","title":"limit"},{"location":"commands/command_limit/#aliases","text":"limit","title":"Aliases"},{"location":"commands/command_limit/#synopsis","text":"| limit [count=]<event count> <pipeline>","title":"Synopsis"},{"location":"commands/command_limit/#schema","text":"{ \"properties\": {} }","title":"Schema"},{"location":"commands/command_limit/#description","text":"","title":"Description"},{"location":"commands/command_limit/#examples","text":"","title":"Examples"},{"location":"commands/command_macro/","tags":["MetaCommand"],"text":"macro Record a macro, run a macro or return macros list Aliases macro Synopsis | macro [<name> [pipeline]] The macro command will cast itself into one of three other comands when ran, depending on its arguments: Command Effect Condition macros List available macros No argument _recordmacro Record a macro A pipeline is given in parameters _runmacro Run a macro A macro name and optional arguments are given in parameters List the macros The commands macro (without argument) and macros behaves identically: | macro | macros Record a macro | macro <name> pipeline Warning: macro currently does not suoport sub-pipelines (one can't record a macro which itself uses a sub-pipeline). Examples make_10 will generate 10 events when invoked: | macro make_10 [ | make count=10 showinfo=yes ] make_some will generate the number of events if the field named count . If count is not found in the field, it will generate 1 event: | macro make_some [ | make count=`field(count, 1)` showinfo=yes ] Run a macro | macro <name> [<arg>=<value>, ...] Examples: | macro make_10 | macro make_some count=5 Schema { \"properties\": {} } Description Examples","title":"macro"},{"location":"commands/command_macro/#macro","text":"Record a macro, run a macro or return macros list","title":"macro"},{"location":"commands/command_macro/#aliases","text":"macro","title":"Aliases"},{"location":"commands/command_macro/#synopsis","text":"| macro [<name> [pipeline]] The macro command will cast itself into one of three other comands when ran, depending on its arguments: Command Effect Condition macros List available macros No argument _recordmacro Record a macro A pipeline is given in parameters _runmacro Run a macro A macro name and optional arguments are given in parameters","title":"Synopsis"},{"location":"commands/command_macro/#list-the-macros","text":"The commands macro (without argument) and macros behaves identically: | macro | macros","title":"List the macros"},{"location":"commands/command_macro/#record-a-macro","text":"| macro <name> pipeline Warning: macro currently does not suoport sub-pipelines (one can't record a macro which itself uses a sub-pipeline).","title":"Record a macro"},{"location":"commands/command_macro/#examples","text":"make_10 will generate 10 events when invoked: | macro make_10 [ | make count=10 showinfo=yes ] make_some will generate the number of events if the field named count . If count is not found in the field, it will generate 1 event: | macro make_some [ | make count=`field(count, 1)` showinfo=yes ]","title":"Examples"},{"location":"commands/command_macro/#run-a-macro","text":"| macro <name> [<arg>=<value>, ...] Examples: | macro make_10 | macro make_some count=5","title":"Run a macro"},{"location":"commands/command_macro/#schema","text":"{ \"properties\": {} }","title":"Schema"},{"location":"commands/command_macro/#description","text":"","title":"Description"},{"location":"commands/command_macro/#examples_1","text":"","title":"Examples"},{"location":"commands/command_macros/","tags":["GeneratingCommand"],"text":"macros Returns the list of macros Aliases macros Synopsis | macros Schema { \"properties\": { \"macro\": { \"description\": \"Macro definition\" } } } Description Examples","title":"macros"},{"location":"commands/command_macros/#macros","text":"Returns the list of macros","title":"macros"},{"location":"commands/command_macros/#aliases","text":"macros","title":"Aliases"},{"location":"commands/command_macros/#synopsis","text":"| macros","title":"Synopsis"},{"location":"commands/command_macros/#schema","text":"{ \"properties\": { \"macro\": { \"description\": \"Macro definition\" } } }","title":"Schema"},{"location":"commands/command_macros/#description","text":"","title":"Description"},{"location":"commands/command_macros/#examples","text":"","title":"Examples"},{"location":"commands/command_make/","tags":["GeneratingCommand"],"text":"make Generates and returns new events Aliases make makeevent makeevents Synopsis | make [[count=]<number>] [[showinfo=](yes|no)] [[frequency=]<seconds>] Schema { \"properties\": { \"id\": { \"type\": \"number\", \"description\": \"Event count\" }, \"chunk\": { \"type\": \"object\", \"properties\": { \"chunk\": { \"type\": \"number\", \"description\": \"Current chunk\" }, \"chunks\": { \"type\": \"number\", \"description\": \"Chunks count\" } } }, \"count\": { \"type\": \"object\", \"properties\": { \"begin\": { \"type\": \"number\", \"description\": \"Minium event count in chunk\" }, \"end\": { \"type\": \"number\", \"description\": \"Maximum event count in chunk\" } } }, \"pipeline\": { \"type\": \"object\", \"properties\": { \"name\": { \"type\": \"string\", \"description\": \"Chunk pipeline name\" } } } } } Description make generates events. It is primarily used in local scripts, REPL mode and debug operations. Examples Generate a single, empty event: | make Generate 10 events with basic information: | make count=10 showinfo=yes","title":"make"},{"location":"commands/command_make/#make","text":"Generates and returns new events","title":"make"},{"location":"commands/command_make/#aliases","text":"make makeevent makeevents","title":"Aliases"},{"location":"commands/command_make/#synopsis","text":"| make [[count=]<number>] [[showinfo=](yes|no)] [[frequency=]<seconds>]","title":"Synopsis"},{"location":"commands/command_make/#schema","text":"{ \"properties\": { \"id\": { \"type\": \"number\", \"description\": \"Event count\" }, \"chunk\": { \"type\": \"object\", \"properties\": { \"chunk\": { \"type\": \"number\", \"description\": \"Current chunk\" }, \"chunks\": { \"type\": \"number\", \"description\": \"Chunks count\" } } }, \"count\": { \"type\": \"object\", \"properties\": { \"begin\": { \"type\": \"number\", \"description\": \"Minium event count in chunk\" }, \"end\": { \"type\": \"number\", \"description\": \"Maximum event count in chunk\" } } }, \"pipeline\": { \"type\": \"object\", \"properties\": { \"name\": { \"type\": \"string\", \"description\": \"Chunk pipeline name\" } } } } }","title":"Schema"},{"location":"commands/command_make/#description","text":"make generates events. It is primarily used in local scripts, REPL mode and debug operations.","title":"Description"},{"location":"commands/command_make/#examples","text":"Generate a single, empty event: | make Generate 10 events with basic information: | make count=10 showinfo=yes","title":"Examples"},{"location":"commands/command_mpl-dispatcher/","tags":["StreamingCommand"],"text":"mpl-dispatcher M42PL dispatcher Aliases mpl-dispatcher mpl-dispatch Synopsis | mpl-dispatcher [source=]{pipeline source} [event=]{initial event} Schema {} Description Examples","title":"mpl-dispatcher"},{"location":"commands/command_mpl-dispatcher/#mpl-dispatcher","text":"M42PL dispatcher","title":"mpl-dispatcher"},{"location":"commands/command_mpl-dispatcher/#aliases","text":"mpl-dispatcher mpl-dispatch","title":"Aliases"},{"location":"commands/command_mpl-dispatcher/#synopsis","text":"| mpl-dispatcher [source=]{pipeline source} [event=]{initial event}","title":"Synopsis"},{"location":"commands/command_mpl-dispatcher/#schema","text":"{}","title":"Schema"},{"location":"commands/command_mpl-dispatcher/#description","text":"","title":"Description"},{"location":"commands/command_mpl-dispatcher/#examples","text":"","title":"Examples"},{"location":"commands/command_mpl-server/","tags":["GeneratingCommand"],"text":"mpl-server M42PL server (API) Aliases mpl-server mpl-serve Synopsis | mpl-server [[host=]<hostname>] [[port=]<port>] Schema {} Description Examples","title":"mpl-server"},{"location":"commands/command_mpl-server/#mpl-server","text":"M42PL server (API)","title":"mpl-server"},{"location":"commands/command_mpl-server/#aliases","text":"mpl-server mpl-serve","title":"Aliases"},{"location":"commands/command_mpl-server/#synopsis","text":"| mpl-server [[host=]<hostname>] [[port=]<port>]","title":"Synopsis"},{"location":"commands/command_mpl-server/#schema","text":"{}","title":"Schema"},{"location":"commands/command_mpl-server/#description","text":"","title":"Description"},{"location":"commands/command_mpl-server/#examples","text":"","title":"Examples"},{"location":"commands/command_mpl_commands/","tags":["GeneratingCommand"],"text":"mpl_commands Returns the list of available commands Aliases mpl_commands mpl_command commands command Synopsis | mpl_commands [[command=]command_name] [[ebnf=]yes|no] Schema { \"properties\": { \"command\": { \"type\": \"object\", \"properties\": { \"alias\": {}, \"aliases\": {}, \"schema\": {}, \"about\": {}, \"syntax\": {}, \"type\": {}, \"ebnf\": {} } } } } Description Examples","title":"mpl_commands"},{"location":"commands/command_mpl_commands/#mpl_commands","text":"Returns the list of available commands","title":"mpl_commands"},{"location":"commands/command_mpl_commands/#aliases","text":"mpl_commands mpl_command commands command","title":"Aliases"},{"location":"commands/command_mpl_commands/#synopsis","text":"| mpl_commands [[command=]command_name] [[ebnf=]yes|no]","title":"Synopsis"},{"location":"commands/command_mpl_commands/#schema","text":"{ \"properties\": { \"command\": { \"type\": \"object\", \"properties\": { \"alias\": {}, \"aliases\": {}, \"schema\": {}, \"about\": {}, \"syntax\": {}, \"type\": {}, \"ebnf\": {} } } } }","title":"Schema"},{"location":"commands/command_mpl_commands/#description","text":"","title":"Description"},{"location":"commands/command_mpl_commands/#examples","text":"","title":"Examples"},{"location":"commands/command_multiproc-send/","tags":["StreamingCommand"],"text":"multiproc-send Aliases multiproc-send multiproc-receive Synopsis | multiproc-send Schema {} Description Examples","title":"multiproc-send"},{"location":"commands/command_multiproc-send/#multiproc-send","text":"","title":"multiproc-send"},{"location":"commands/command_multiproc-send/#aliases","text":"multiproc-send multiproc-receive","title":"Aliases"},{"location":"commands/command_multiproc-send/#synopsis","text":"| multiproc-send","title":"Synopsis"},{"location":"commands/command_multiproc-send/#schema","text":"{}","title":"Schema"},{"location":"commands/command_multiproc-send/#description","text":"","title":"Description"},{"location":"commands/command_multiproc-send/#examples","text":"","title":"Examples"},{"location":"commands/command_noout/","tags":["BufferingCommand"],"text":"noout Mimics output syntax but does not prints events Aliases noout nooutput noprint Synopsis | noout [[format=]<hjson|raw|...>] [[header=]<yes|no>] [[buffer=]<number>] Schema { \"properties\": {} } Description Examples","title":"noout"},{"location":"commands/command_noout/#noout","text":"Mimics output syntax but does not prints events","title":"noout"},{"location":"commands/command_noout/#aliases","text":"noout nooutput noprint","title":"Aliases"},{"location":"commands/command_noout/#synopsis","text":"| noout [[format=]<hjson|raw|...>] [[header=]<yes|no>] [[buffer=]<number>]","title":"Synopsis"},{"location":"commands/command_noout/#schema","text":"{ \"properties\": {} }","title":"Schema"},{"location":"commands/command_noout/#description","text":"","title":"Description"},{"location":"commands/command_noout/#examples","text":"","title":"Examples"},{"location":"commands/command_output/","tags":["BufferingCommand"],"text":"output Prints events Aliases output print Synopsis | output [[format=]<hjson|raw|...>] [[header=]<yes|no>] [[buffer=]<number>] Schema { \"properties\": {} } Description output prints events on the standard output (i.e. the terminal). output can print events using the specified format , which should match an encoder name (e.g. json , hjson , ...). It also buffers events and filters duplicate events id (only the latest event with a given ID is kept in the internal buffer and then printed). Examples Output events: | output Output events as they arrive (without buffer): | output buffer=1 Output events as 'json' strings: | output format='json'","title":"output"},{"location":"commands/command_output/#output","text":"Prints events","title":"output"},{"location":"commands/command_output/#aliases","text":"output print","title":"Aliases"},{"location":"commands/command_output/#synopsis","text":"| output [[format=]<hjson|raw|...>] [[header=]<yes|no>] [[buffer=]<number>]","title":"Synopsis"},{"location":"commands/command_output/#schema","text":"{ \"properties\": {} }","title":"Schema"},{"location":"commands/command_output/#description","text":"output prints events on the standard output (i.e. the terminal). output can print events using the specified format , which should match an encoder name (e.g. json , hjson , ...). It also buffers events and filters duplicate events id (only the latest event with a given ID is kept in the internal buffer and then printed).","title":"Description"},{"location":"commands/command_output/#examples","text":"Output events: | output Output events as they arrive (without buffer): | output buffer=1 Output events as 'json' strings: | output format='json'","title":"Examples"},{"location":"commands/command_parallel/","tags":["StreamingCommand"],"text":"parallel Run multiple sub-pipelines Aliases parallel tee Synopsis | parallel <pipeline> [, ...] Schema { \"properties\": {} } Description Examples","title":"parallel"},{"location":"commands/command_parallel/#parallel","text":"Run multiple sub-pipelines","title":"parallel"},{"location":"commands/command_parallel/#aliases","text":"parallel tee","title":"Aliases"},{"location":"commands/command_parallel/#synopsis","text":"| parallel <pipeline> [, ...]","title":"Synopsis"},{"location":"commands/command_parallel/#schema","text":"{ \"properties\": {} }","title":"Schema"},{"location":"commands/command_parallel/#description","text":"","title":"Description"},{"location":"commands/command_parallel/#examples","text":"","title":"Examples"},{"location":"commands/command_parse_json/","tags":["StreamingCommand"],"text":"parse_json Parse a JSON string Aliases parse_json json_parse Synopsis | parse_json [field=]<field> Schema { \"properties\": { \"{field}\": { \"type\": \"object\", \"description\": \"String parsed as object\" } } } Description Examples","title":"parse_json"},{"location":"commands/command_parse_json/#parse_json","text":"Parse a JSON string","title":"parse_json"},{"location":"commands/command_parse_json/#aliases","text":"parse_json json_parse","title":"Aliases"},{"location":"commands/command_parse_json/#synopsis","text":"| parse_json [field=]<field>","title":"Synopsis"},{"location":"commands/command_parse_json/#schema","text":"{ \"properties\": { \"{field}\": { \"type\": \"object\", \"description\": \"String parsed as object\" } } }","title":"Schema"},{"location":"commands/command_parse_json/#description","text":"","title":"Description"},{"location":"commands/command_parse_json/#examples","text":"","title":"Examples"},{"location":"commands/command_print_stats/","tags":["BufferingCommand"],"text":"print_stats Prints statistical table Aliases print_stats output_stats stats_output stats_print Synopsis | print_stats [[buffer=]<buffer size>] Schema { \"properties\": {} } Description Examples","title":"print_stats"},{"location":"commands/command_print_stats/#print_stats","text":"Prints statistical table","title":"print_stats"},{"location":"commands/command_print_stats/#aliases","text":"print_stats output_stats stats_output stats_print","title":"Aliases"},{"location":"commands/command_print_stats/#synopsis","text":"| print_stats [[buffer=]<buffer size>]","title":"Synopsis"},{"location":"commands/command_print_stats/#schema","text":"{ \"properties\": {} }","title":"Schema"},{"location":"commands/command_print_stats/#description","text":"","title":"Description"},{"location":"commands/command_print_stats/#examples","text":"","title":"Examples"},{"location":"commands/command_process/","tags":["GeneratingCommand"],"text":"process Runs a process and yields its output line by line Aliases process Synopsis | process {command name} [argument, ...] Schema { \"properties\": { \"line\": { \"type\": \"string\", \"description\": \"A line emitted by the process\" } } } Description Examples","title":"process"},{"location":"commands/command_process/#process","text":"Runs a process and yields its output line by line","title":"process"},{"location":"commands/command_process/#aliases","text":"process","title":"Aliases"},{"location":"commands/command_process/#synopsis","text":"| process {command name} [argument, ...]","title":"Synopsis"},{"location":"commands/command_process/#schema","text":"{ \"properties\": { \"line\": { \"type\": \"string\", \"description\": \"A line emitted by the process\" } } }","title":"Schema"},{"location":"commands/command_process/#description","text":"","title":"Description"},{"location":"commands/command_process/#examples","text":"","title":"Examples"},{"location":"commands/command_purgemacro/","tags":["MetaCommand"],"text":"purgemacro Delete all macros Aliases purgemacro purgemacros Synopsis | purgemacro Schema { \"properties\": {} } Description Examples","title":"purgemacro"},{"location":"commands/command_purgemacro/#purgemacro","text":"Delete all macros","title":"purgemacro"},{"location":"commands/command_purgemacro/#aliases","text":"purgemacro purgemacros","title":"Aliases"},{"location":"commands/command_purgemacro/#synopsis","text":"| purgemacro","title":"Synopsis"},{"location":"commands/command_purgemacro/#schema","text":"{ \"properties\": {} }","title":"Schema"},{"location":"commands/command_purgemacro/#description","text":"","title":"Description"},{"location":"commands/command_purgemacro/#examples","text":"","title":"Examples"},{"location":"commands/command_readfile/","tags":["GeneratingCommand"],"text":"readfile Read a text file Aliases readfile Synopsis | readfile {file path} (as {field name}) Schema { \"properties\": { \"file\": { \"type\": \"string\", \"description\": \"Read data\" } } } Description Examples","title":"readfile"},{"location":"commands/command_readfile/#readfile","text":"Read a text file","title":"readfile"},{"location":"commands/command_readfile/#aliases","text":"readfile","title":"Aliases"},{"location":"commands/command_readfile/#synopsis","text":"| readfile {file path} (as {field name})","title":"Synopsis"},{"location":"commands/command_readfile/#schema","text":"{ \"properties\": { \"file\": { \"type\": \"string\", \"description\": \"Read data\" } } }","title":"Schema"},{"location":"commands/command_readfile/#description","text":"","title":"Description"},{"location":"commands/command_readfile/#examples","text":"","title":"Examples"},{"location":"commands/command_readlines/","tags":["GeneratingCommand"],"text":"readlines Read a file line by line Aliases readlines readline Synopsis | readlines [path=]{file path} [field=]{dest field} Schema { \"properties\": { \"{dest field}\": { \"type\": \"object\", \"properties\": { \"text\": { \"type\": \"string\", \"description\": \"Read line\" }, \"line\": { \"type\": \"number\", \"description\": \"Line count\" } } } } } Description Examples","title":"readlines"},{"location":"commands/command_readlines/#readlines","text":"Read a file line by line","title":"readlines"},{"location":"commands/command_readlines/#aliases","text":"readlines readline","title":"Aliases"},{"location":"commands/command_readlines/#synopsis","text":"| readlines [path=]{file path} [field=]{dest field}","title":"Synopsis"},{"location":"commands/command_readlines/#schema","text":"{ \"properties\": { \"{dest field}\": { \"type\": \"object\", \"properties\": { \"text\": { \"type\": \"string\", \"description\": \"Read line\" }, \"line\": { \"type\": \"number\", \"description\": \"Line count\" } } } } }","title":"Schema"},{"location":"commands/command_readlines/#description","text":"","title":"Description"},{"location":"commands/command_readlines/#examples","text":"","title":"Examples"},{"location":"commands/command_regex/","tags":["StreamingCommand"],"text":"regex Parse a field with a regular expression Aliases regex rex rx Synopsis | regex {src} with <regular expression> [as|to {dest}] Schema { \"properties\": { \"{dest}\": { \"type\": \"object\" } } } Description Examples","title":"regex"},{"location":"commands/command_regex/#regex","text":"Parse a field with a regular expression","title":"regex"},{"location":"commands/command_regex/#aliases","text":"regex rex rx","title":"Aliases"},{"location":"commands/command_regex/#synopsis","text":"| regex {src} with <regular expression> [as|to {dest}]","title":"Synopsis"},{"location":"commands/command_regex/#schema","text":"{ \"properties\": { \"{dest}\": { \"type\": \"object\" } } }","title":"Schema"},{"location":"commands/command_regex/#description","text":"","title":"Description"},{"location":"commands/command_regex/#examples","text":"","title":"Examples"},{"location":"commands/command_rename/","tags":["StreamingCommand"],"text":"rename Rename fields Aliases rename Synopsis | rename <existing_field> [as] <new_field> [, ...] Schema { \"properties\": {} } Description Examples","title":"rename"},{"location":"commands/command_rename/#rename","text":"Rename fields","title":"rename"},{"location":"commands/command_rename/#aliases","text":"rename","title":"Aliases"},{"location":"commands/command_rename/#synopsis","text":"| rename <existing_field> [as] <new_field> [, ...]","title":"Synopsis"},{"location":"commands/command_rename/#schema","text":"{ \"properties\": {} }","title":"Schema"},{"location":"commands/command_rename/#description","text":"","title":"Description"},{"location":"commands/command_rename/#examples","text":"","title":"Examples"},{"location":"commands/command_script/","tags":["Command"],"text":"script Parses a M42PL script and returns a pipelines map Aliases script script_json Synopsis | script [script=]<script string> Schema {} Description Examples","title":"script"},{"location":"commands/command_script/#script","text":"Parses a M42PL script and returns a pipelines map","title":"script"},{"location":"commands/command_script/#aliases","text":"script script_json","title":"Aliases"},{"location":"commands/command_script/#synopsis","text":"| script [script=]<script string>","title":"Synopsis"},{"location":"commands/command_script/#schema","text":"{}","title":"Schema"},{"location":"commands/command_script/#description","text":"","title":"Description"},{"location":"commands/command_script/#examples","text":"","title":"Examples"},{"location":"commands/command_server/","tags":["GeneratingCommand"],"text":"server Receives data on a given protocol, host IP and port Aliases server serve listen Synopsis | server [[protocol=]<tcp|udp>] [[host=]<ip>] [[port=]<port>] Schema { \"properties\": { \"msg\": { \"type\": \"object\", \"properties\": { \"data\": { \"description\": \"received data\" }, \"host\": { \"description\": \"client host\" }, \"port\": { \"description\": \"client port\" } } } } } Description Examples","title":"server"},{"location":"commands/command_server/#server","text":"Receives data on a given protocol, host IP and port","title":"server"},{"location":"commands/command_server/#aliases","text":"server serve listen","title":"Aliases"},{"location":"commands/command_server/#synopsis","text":"| server [[protocol=]<tcp|udp>] [[host=]<ip>] [[port=]<port>]","title":"Synopsis"},{"location":"commands/command_server/#schema","text":"{ \"properties\": { \"msg\": { \"type\": \"object\", \"properties\": { \"data\": { \"description\": \"received data\" }, \"host\": { \"description\": \"client host\" }, \"port\": { \"description\": \"client port\" } } } } }","title":"Schema"},{"location":"commands/command_server/#description","text":"","title":"Description"},{"location":"commands/command_server/#examples","text":"","title":"Examples"},{"location":"commands/command_sleep/","tags":["StreamingCommand"],"text":"sleep Sleep for the given amount of seconds (defaults to 1 second) Aliases sleep Synopsis | sleep <seconds> Schema { \"properties\": {} } Description Examples","title":"sleep"},{"location":"commands/command_sleep/#sleep","text":"Sleep for the given amount of seconds (defaults to 1 second)","title":"sleep"},{"location":"commands/command_sleep/#aliases","text":"sleep","title":"Aliases"},{"location":"commands/command_sleep/#synopsis","text":"| sleep <seconds>","title":"Synopsis"},{"location":"commands/command_sleep/#schema","text":"{ \"properties\": {} }","title":"Schema"},{"location":"commands/command_sleep/#description","text":"","title":"Description"},{"location":"commands/command_sleep/#examples","text":"","title":"Examples"},{"location":"commands/command_split/","tags":["StreamingCommand"],"text":"split Returns one new event per value for the given field Aliases split mvsplit Synopsis | split [field=]{field name} Schema { \"additionalProperties\": { \"description\": \"Source event properties\" } } Description Examples","title":"split"},{"location":"commands/command_split/#split","text":"Returns one new event per value for the given field","title":"split"},{"location":"commands/command_split/#aliases","text":"split mvsplit","title":"Aliases"},{"location":"commands/command_split/#synopsis","text":"| split [field=]{field name}","title":"Synopsis"},{"location":"commands/command_split/#schema","text":"{ \"additionalProperties\": { \"description\": \"Source event properties\" } }","title":"Schema"},{"location":"commands/command_split/#description","text":"","title":"Description"},{"location":"commands/command_split/#examples","text":"","title":"Examples"},{"location":"commands/command_stats/","tags":["StreamingCommand"],"text":"stats Performs statistical operations on an events stream Aliases stats aggr aggregate Synopsis | stats <function> [as <field>], ... by <field>, ... [with ...] If no aggregation clause (the by word) is given, stats aggregates all events together without distinction: | make count=10 showinfo=yes | eval is_even = even(id) | stats min(id) as min_id, max(id) as max_id { \"min_id\": 0, \"max_id\": 9 } If an aggregation clause (the by word) is given, stats aggregates events based on the by field(s). In the next example, events are aggregated by the value of the field is_even : | make count=10 showinfo=yes | eval is_even = even(id) | stats min(id) as min_id, max(id) as max_id by is_even { \"is_even\": true, \"min_id\": 0, \"max_id\": 8 } { \"is_even\": false, \"min_id\": 1, \"max_id\": 9 } One can check the internal aggregation structures using the aggregates functor (this functor should be treated as a debug functor). One can also customize some aspect of stats 's internals by adding a with clause at the end of the command. This is not a standard use case: Please refers to the technical documentation for more information. Schema { \"additionalProperties\": { \"description\": \"Aggregates and aggregation fields\" } } Description stats aggregates events by field(s) and compute statistical values from the events stream using stats functions . It is important to understand that the event stream is seen as infinite. This implies two majors effects: stats memory will grow overtime stats yields events whoms signatures is computed using their aggregated fields name If you whish to display stats results, you may use either the output command or print_stats . The advantage of print_stats is that it will display a continuously updated data table instead of JSON object. Stats functions Function Syntax Description count count , count() Count the number of events min min(<field>) Returns the minimum value of field max max(<field>) Returns the maximum value of field values values(<field>) Returns the list of values of field first first(<field>) Returns the first value of field last last(<field>) Returns the latest value of field aggregates aggregates , aggregates() Returns the internal aggregation structures Examples","title":"stats"},{"location":"commands/command_stats/#stats","text":"Performs statistical operations on an events stream","title":"stats"},{"location":"commands/command_stats/#aliases","text":"stats aggr aggregate","title":"Aliases"},{"location":"commands/command_stats/#synopsis","text":"| stats <function> [as <field>], ... by <field>, ... [with ...] If no aggregation clause (the by word) is given, stats aggregates all events together without distinction: | make count=10 showinfo=yes | eval is_even = even(id) | stats min(id) as min_id, max(id) as max_id { \"min_id\": 0, \"max_id\": 9 } If an aggregation clause (the by word) is given, stats aggregates events based on the by field(s). In the next example, events are aggregated by the value of the field is_even : | make count=10 showinfo=yes | eval is_even = even(id) | stats min(id) as min_id, max(id) as max_id by is_even { \"is_even\": true, \"min_id\": 0, \"max_id\": 8 } { \"is_even\": false, \"min_id\": 1, \"max_id\": 9 } One can check the internal aggregation structures using the aggregates functor (this functor should be treated as a debug functor). One can also customize some aspect of stats 's internals by adding a with clause at the end of the command. This is not a standard use case: Please refers to the technical documentation for more information.","title":"Synopsis"},{"location":"commands/command_stats/#schema","text":"{ \"additionalProperties\": { \"description\": \"Aggregates and aggregation fields\" } }","title":"Schema"},{"location":"commands/command_stats/#description","text":"stats aggregates events by field(s) and compute statistical values from the events stream using stats functions . It is important to understand that the event stream is seen as infinite. This implies two majors effects: stats memory will grow overtime stats yields events whoms signatures is computed using their aggregated fields name If you whish to display stats results, you may use either the output command or print_stats . The advantage of print_stats is that it will display a continuously updated data table instead of JSON object.","title":"Description"},{"location":"commands/command_stats/#stats-functions","text":"Function Syntax Description count count , count() Count the number of events min min(<field>) Returns the minimum value of field max max(<field>) Returns the maximum value of field values values(<field>) Returns the list of values of field first first(<field>) Returns the first value of field last last(<field>) Returns the latest value of field aggregates aggregates , aggregates() Returns the internal aggregation structures","title":"Stats functions"},{"location":"commands/command_stats/#examples","text":"","title":"Examples"},{"location":"commands/command_tag/","tags":["StreamingCommand"],"text":"tag Tags events with key/value pairs Aliases tag tags Synopsis | tag <key name>={field} [...] Schema { \"properties\": { \"tags\": { \"type\": \"object\", \"description\": \"Tags as key/value pairs\" } } } Description Examples","title":"tag"},{"location":"commands/command_tag/#tag","text":"Tags events with key/value pairs","title":"tag"},{"location":"commands/command_tag/#aliases","text":"tag tags","title":"Aliases"},{"location":"commands/command_tag/#synopsis","text":"| tag <key name>={field} [...]","title":"Synopsis"},{"location":"commands/command_tag/#schema","text":"{ \"properties\": { \"tags\": { \"type\": \"object\", \"description\": \"Tags as key/value pairs\" } } }","title":"Schema"},{"location":"commands/command_tag/#description","text":"","title":"Description"},{"location":"commands/command_tag/#examples","text":"","title":"Examples"},{"location":"commands/command_tailf/","tags":["StreamingCommand"],"text":"tailf Ignore the firsts events Aliases tailf Synopsis | tailf [[count=]<count>] Schema { \"additionalProperties\": { \"description\": \"Source event properties\" } } Description Examples","title":"tailf"},{"location":"commands/command_tailf/#tailf","text":"Ignore the firsts events","title":"tailf"},{"location":"commands/command_tailf/#aliases","text":"tailf","title":"Aliases"},{"location":"commands/command_tailf/#synopsis","text":"| tailf [[count=]<count>]","title":"Synopsis"},{"location":"commands/command_tailf/#schema","text":"{ \"additionalProperties\": { \"description\": \"Source event properties\" } }","title":"Schema"},{"location":"commands/command_tailf/#description","text":"","title":"Description"},{"location":"commands/command_tailf/#examples","text":"","title":"Examples"},{"location":"commands/command_until/","tags":["GeneratingCommand"],"text":"until Run a sub-pipeline until a field become true Aliases until Synopsis | until <field> <pipeline> Schema { \"properties\": {} } Description until can be used to construct loops. The command run its given sub-pipeline until the value of its given field become true. Examples Runs a sub-pipeline ten (10) times: | until `field(foo, 0) == 10` [ | eval foo = field(foo, 0) + 1 | output buffer=1 ] Note that the field is encolsed in backquotes ( `field(foo, 0) == 10` ): This is because the example is using an evaluated field. The evaluation command field return the content of the field foo or 0 if the field is not found. Runs a sub-pipeline once and demonstrate the use of non-evaluated fields: | eval foo = False | foreach [ | until foo [ | eval foo = True ] ]","title":"until"},{"location":"commands/command_until/#until","text":"Run a sub-pipeline until a field become true","title":"until"},{"location":"commands/command_until/#aliases","text":"until","title":"Aliases"},{"location":"commands/command_until/#synopsis","text":"| until <field> <pipeline>","title":"Synopsis"},{"location":"commands/command_until/#schema","text":"{ \"properties\": {} }","title":"Schema"},{"location":"commands/command_until/#description","text":"until can be used to construct loops. The command run its given sub-pipeline until the value of its given field become true.","title":"Description"},{"location":"commands/command_until/#examples","text":"Runs a sub-pipeline ten (10) times: | until `field(foo, 0) == 10` [ | eval foo = field(foo, 0) + 1 | output buffer=1 ] Note that the field is encolsed in backquotes ( `field(foo, 0) == 10` ): This is because the example is using an evaluated field. The evaluation command field return the content of the field foo or 0 if the field is not found. Runs a sub-pipeline once and demonstrate the use of non-evaluated fields: | eval foo = False | foreach [ | until foo [ | eval foo = True ] ]","title":"Examples"},{"location":"commands/command_url/","tags":["GeneratingCommand"],"text":"url Performs asynchronous HTTP calls to a given URL Aliases url curl wget Synopsis | url [urls=](url, ...) [[method=]{HTTP method}] [[headers]={headers k/v}][[data=]{data k/v}] [[json=]{json k/v}] [[frequency=]{seconds}][[count=]{integer}] Schema { \"properties\": { \"time\": { \"type\": \"number\" }, \"request\": { \"type\": \"object\", \"description\": \"HTTP request\", \"properties\": { \"method\": { \"type\": \"string\" }, \"url\": { \"type\": \"string\" }, \"headers\": { \"type\": \"object\" }, \"data\": { \"type\": \"object\" } } }, \"response\": { \"type\": \"object\", \"description\": \"HTTP response\", \"properties\": { \"status\": { \"type\": \"number\" }, \"reason\": { \"type\": \"string\" }, \"mime\": { \"type\": \"object\" }, \"headers\": { \"type\": \"object\" }, \"content\": {} } } } } Description Examples","title":"url"},{"location":"commands/command_url/#url","text":"Performs asynchronous HTTP calls to a given URL","title":"url"},{"location":"commands/command_url/#aliases","text":"url curl wget","title":"Aliases"},{"location":"commands/command_url/#synopsis","text":"| url [urls=](url, ...) [[method=]{HTTP method}] [[headers]={headers k/v}][[data=]{data k/v}] [[json=]{json k/v}] [[frequency=]{seconds}][[count=]{integer}]","title":"Synopsis"},{"location":"commands/command_url/#schema","text":"{ \"properties\": { \"time\": { \"type\": \"number\" }, \"request\": { \"type\": \"object\", \"description\": \"HTTP request\", \"properties\": { \"method\": { \"type\": \"string\" }, \"url\": { \"type\": \"string\" }, \"headers\": { \"type\": \"object\" }, \"data\": { \"type\": \"object\" } } }, \"response\": { \"type\": \"object\", \"description\": \"HTTP response\", \"properties\": { \"status\": { \"type\": \"number\" }, \"reason\": { \"type\": \"string\" }, \"mime\": { \"type\": \"object\" }, \"headers\": { \"type\": \"object\" }, \"content\": {} } } } }","title":"Schema"},{"location":"commands/command_url/#description","text":"","title":"Description"},{"location":"commands/command_url/#examples","text":"","title":"Examples"},{"location":"commands/command_where/","tags":["StreamingCommand"],"text":"where Filter events using an eval expression Aliases where filter Synopsis | where <expression> Schema { \"properties\": {} } Description Examples","title":"where"},{"location":"commands/command_where/#where","text":"Filter events using an eval expression","title":"where"},{"location":"commands/command_where/#aliases","text":"where filter","title":"Aliases"},{"location":"commands/command_where/#synopsis","text":"| where <expression>","title":"Synopsis"},{"location":"commands/command_where/#schema","text":"{ \"properties\": {} }","title":"Schema"},{"location":"commands/command_where/#description","text":"","title":"Description"},{"location":"commands/command_where/#examples","text":"","title":"Examples"},{"location":"commands/command_wrap/","tags":["StreamingCommand"],"text":"wrap Wraps all fields into another field Aliases wrap Synopsis | wrap [field=]{field name} Schema { \"properties\": { \"{field}\": { \"description\": \"Wrapper field\" } } } Description Examples","title":"wrap"},{"location":"commands/command_wrap/#wrap","text":"Wraps all fields into another field","title":"wrap"},{"location":"commands/command_wrap/#aliases","text":"wrap","title":"Aliases"},{"location":"commands/command_wrap/#synopsis","text":"| wrap [field=]{field name}","title":"Synopsis"},{"location":"commands/command_wrap/#schema","text":"{ \"properties\": { \"{field}\": { \"description\": \"Wrapper field\" } } }","title":"Schema"},{"location":"commands/command_wrap/#description","text":"","title":"Description"},{"location":"commands/command_wrap/#examples","text":"","title":"Examples"},{"location":"commands/command_write-append/","tags":["StreamingCommand"],"text":"write-append Write events or events field to a file (append) Aliases write-append writefile-append Synopsis | write-append ({field name} to) {file path} Schema { \"properties\": {} } Description Examples","title":"write-append"},{"location":"commands/command_write-append/#write-append","text":"Write events or events field to a file (append)","title":"write-append"},{"location":"commands/command_write-append/#aliases","text":"write-append writefile-append","title":"Aliases"},{"location":"commands/command_write-append/#synopsis","text":"| write-append ({field name} to) {file path}","title":"Synopsis"},{"location":"commands/command_write-append/#schema","text":"{ \"properties\": {} }","title":"Schema"},{"location":"commands/command_write-append/#description","text":"","title":"Description"},{"location":"commands/command_write-append/#examples","text":"","title":"Examples"},{"location":"commands/command_write/","tags":["StreamingCommand"],"text":"write Write events or events field to a file (truncate) Aliases write writefile Synopsis | write ({field name} to) {file path} Schema { \"properties\": {} } Description Examples","title":"write"},{"location":"commands/command_write/#write","text":"Write events or events field to a file (truncate)","title":"write"},{"location":"commands/command_write/#aliases","text":"write writefile","title":"Aliases"},{"location":"commands/command_write/#synopsis","text":"| write ({field name} to) {file path}","title":"Synopsis"},{"location":"commands/command_write/#schema","text":"{ \"properties\": {} }","title":"Schema"},{"location":"commands/command_write/#description","text":"","title":"Description"},{"location":"commands/command_write/#examples","text":"","title":"Examples"},{"location":"commands/command_ws_bcast/","tags":["StreamingCommand"],"text":"ws_bcast Broadcast events to websocket clients Aliases ws_bcast ws_broadcast Synopsis | ws_bcast [[path]={path}] [[encoder=]<encoder name>] [[host=]<ip/hostname>] [[port=]<port>] Schema { \"properties\": {}, \"additionalProperties\": { \"description\": \"Event fields\" } } Description Examples","title":"ws_bcast"},{"location":"commands/command_ws_bcast/#ws_bcast","text":"Broadcast events to websocket clients","title":"ws_bcast"},{"location":"commands/command_ws_bcast/#aliases","text":"ws_bcast ws_broadcast","title":"Aliases"},{"location":"commands/command_ws_bcast/#synopsis","text":"| ws_bcast [[path]={path}] [[encoder=]<encoder name>] [[host=]<ip/hostname>] [[port=]<port>]","title":"Synopsis"},{"location":"commands/command_ws_bcast/#schema","text":"{ \"properties\": {}, \"additionalProperties\": { \"description\": \"Event fields\" } }","title":"Schema"},{"location":"commands/command_ws_bcast/#description","text":"","title":"Description"},{"location":"commands/command_ws_bcast/#examples","text":"","title":"Examples"},{"location":"commands/command_xpath/","tags":["StreamingCommand"],"text":"xpath Evaluate an XPath expression Aliases xpath Synopsis | xpath <[expression=]expression> <[field=]source field> [[dest=]dest field] Schema { \"properties\": { \"{dest}\": { \"description\": \"XPath results\" } } } Description Examples","title":"xpath"},{"location":"commands/command_xpath/#xpath","text":"Evaluate an XPath expression","title":"xpath"},{"location":"commands/command_xpath/#aliases","text":"xpath","title":"Aliases"},{"location":"commands/command_xpath/#synopsis","text":"| xpath <[expression=]expression> <[field=]source field> [[dest=]dest field]","title":"Synopsis"},{"location":"commands/command_xpath/#schema","text":"{ \"properties\": { \"{dest}\": { \"description\": \"XPath results\" } } }","title":"Schema"},{"location":"commands/command_xpath/#description","text":"","title":"Description"},{"location":"commands/command_xpath/#examples","text":"","title":"Examples"},{"location":"commands/command_zmq_proxy/","tags":["GeneratingCommand"],"text":"zmq_proxy Receives and forwards ZMQ messages Aliases zmq_proxy Synopsis | zmq_proxy [[frontend=]<frontend URL>] [[backend=]<bakend URL>] Schema { \"properties\": { \"topic\": { \"type\": \"string\", \"description\": \"ZMQ topic\" }, \"frames\": { \"type\": \"array\", \"description\": \"Message frames\" } } } Description Examples","title":"zmq_proxy"},{"location":"commands/command_zmq_proxy/#zmq_proxy","text":"Receives and forwards ZMQ messages","title":"zmq_proxy"},{"location":"commands/command_zmq_proxy/#aliases","text":"zmq_proxy","title":"Aliases"},{"location":"commands/command_zmq_proxy/#synopsis","text":"| zmq_proxy [[frontend=]<frontend URL>] [[backend=]<bakend URL>]","title":"Synopsis"},{"location":"commands/command_zmq_proxy/#schema","text":"{ \"properties\": { \"topic\": { \"type\": \"string\", \"description\": \"ZMQ topic\" }, \"frames\": { \"type\": \"array\", \"description\": \"Message frames\" } } }","title":"Schema"},{"location":"commands/command_zmq_proxy/#description","text":"","title":"Description"},{"location":"commands/command_zmq_proxy/#examples","text":"","title":"Examples"},{"location":"commands/command_zmq_pub/","tags":["StreamingCommand"],"text":"zmq_pub Publish events or events field(s) to ZMQ Aliases zmq_pub zmq_publish Synopsis | zmq_pub [[url=]<url>] [[codec=]<codec>] [[field=]{field}|({field}, ...)] Schema { \"properties\": {} } Description Examples","title":"zmq_pub"},{"location":"commands/command_zmq_pub/#zmq_pub","text":"Publish events or events field(s) to ZMQ","title":"zmq_pub"},{"location":"commands/command_zmq_pub/#aliases","text":"zmq_pub zmq_publish","title":"Aliases"},{"location":"commands/command_zmq_pub/#synopsis","text":"| zmq_pub [[url=]<url>] [[codec=]<codec>] [[field=]{field}|({field}, ...)]","title":"Synopsis"},{"location":"commands/command_zmq_pub/#schema","text":"{ \"properties\": {} }","title":"Schema"},{"location":"commands/command_zmq_pub/#description","text":"","title":"Description"},{"location":"commands/command_zmq_pub/#examples","text":"","title":"Examples"},{"location":"commands/command_zmq_pull/","tags":["GeneratingCommand"],"text":"zmq_pull Pull events from ZMQ Aliases zmq_pull Synopsis | zmq_pull [[url=]<url>] [[codec=]<codec>] [[field=]<field>] Schema { \"properties\": { \"topic\": { \"type\": \"string\", \"description\": \"ZMQ topic\" }, \"chunk\": { \"type\": \"array\", \"description\": \"Dispatcher chunk ID and chunks count\" } } } Description Examples","title":"zmq_pull"},{"location":"commands/command_zmq_pull/#zmq_pull","text":"Pull events from ZMQ","title":"zmq_pull"},{"location":"commands/command_zmq_pull/#aliases","text":"zmq_pull","title":"Aliases"},{"location":"commands/command_zmq_pull/#synopsis","text":"| zmq_pull [[url=]<url>] [[codec=]<codec>] [[field=]<field>]","title":"Synopsis"},{"location":"commands/command_zmq_pull/#schema","text":"{ \"properties\": { \"topic\": { \"type\": \"string\", \"description\": \"ZMQ topic\" }, \"chunk\": { \"type\": \"array\", \"description\": \"Dispatcher chunk ID and chunks count\" } } }","title":"Schema"},{"location":"commands/command_zmq_pull/#description","text":"","title":"Description"},{"location":"commands/command_zmq_pull/#examples","text":"","title":"Examples"},{"location":"commands/command_zmq_push/","tags":["StreamingCommand"],"text":"zmq_push Push events or events field(s) to ZMQ Aliases zmq_push zmq_ventilate Synopsis | zmq_push [[url=]<url>] [[codec=]<codec>] [[field=]{field}|({field}, ...)] Schema { \"properties\": {} } Description Examples","title":"zmq_push"},{"location":"commands/command_zmq_push/#zmq_push","text":"Push events or events field(s) to ZMQ","title":"zmq_push"},{"location":"commands/command_zmq_push/#aliases","text":"zmq_push zmq_ventilate","title":"Aliases"},{"location":"commands/command_zmq_push/#synopsis","text":"| zmq_push [[url=]<url>] [[codec=]<codec>] [[field=]{field}|({field}, ...)]","title":"Synopsis"},{"location":"commands/command_zmq_push/#schema","text":"{ \"properties\": {} }","title":"Schema"},{"location":"commands/command_zmq_push/#description","text":"","title":"Description"},{"location":"commands/command_zmq_push/#examples","text":"","title":"Examples"},{"location":"commands/command_zmq_sub/","tags":["GeneratingCommand"],"text":"zmq_sub Subscribe and receive messages from ZMQ Aliases zmq_sub zmq_subscribe Synopsis | zmq_sub [[url=]<url>] [[codec=]<codec>] [[field=]<field>] [[topic=]<topic>] Schema { \"properties\": { \"topic\": { \"type\": \"string\", \"description\": \"ZMQ topic\" }, \"frames\": { \"type\": \"array\", \"description\": \"Message frames\" } } } Description Examples","title":"zmq_sub"},{"location":"commands/command_zmq_sub/#zmq_sub","text":"Subscribe and receive messages from ZMQ","title":"zmq_sub"},{"location":"commands/command_zmq_sub/#aliases","text":"zmq_sub zmq_subscribe","title":"Aliases"},{"location":"commands/command_zmq_sub/#synopsis","text":"| zmq_sub [[url=]<url>] [[codec=]<codec>] [[field=]<field>] [[topic=]<topic>]","title":"Synopsis"},{"location":"commands/command_zmq_sub/#schema","text":"{ \"properties\": { \"topic\": { \"type\": \"string\", \"description\": \"ZMQ topic\" }, \"frames\": { \"type\": \"array\", \"description\": \"Message frames\" } } }","title":"Schema"},{"location":"commands/command_zmq_sub/#description","text":"","title":"Description"},{"location":"commands/command_zmq_sub/#examples","text":"","title":"Examples"},{"location":"tags/","text":"Commands type Each M42PL command have a specific type : GeneratingCommand generates (yields) events StreamingCommand process events BufferingCommand process multiple events at once MetaCommand operate on the pipelines instead of events Command are low-level commands, not intended for users BufferingCommand buffer fieldstats noout output print_stats Command script GeneratingCommand echo http_server kvitems kvread macros make mpl-server mpl_commands process readfile readlines server until url zmq_proxy zmq_pull zmq_sub MetaCommand delmacro ignore kvdelete kvwrite macro purgemacro StreamingCommand assert closemacro codecs cut decode delta encode eval expand extract_kv extract_map fields foreach grok head jinja jsonpath limit mpl-dispatcher multiproc-send parallel parse_json regex rename sleep split stats tag tailf where wrap write-append write ws_bcast xpath zmq_pub zmq_push","title":"Commands type"},{"location":"tags/#commands-type","text":"Each M42PL command have a specific type : GeneratingCommand generates (yields) events StreamingCommand process events BufferingCommand process multiple events at once MetaCommand operate on the pipelines instead of events Command are low-level commands, not intended for users","title":"Commands type"},{"location":"tags/#bufferingcommand","text":"buffer fieldstats noout output print_stats","title":"BufferingCommand"},{"location":"tags/#command","text":"script","title":"Command"},{"location":"tags/#generatingcommand","text":"echo http_server kvitems kvread macros make mpl-server mpl_commands process readfile readlines server until url zmq_proxy zmq_pull zmq_sub","title":"GeneratingCommand"},{"location":"tags/#metacommand","text":"delmacro ignore kvdelete kvwrite macro purgemacro","title":"MetaCommand"},{"location":"tags/#streamingcommand","text":"assert closemacro codecs cut decode delta encode eval expand extract_kv extract_map fields foreach grok head jinja jsonpath limit mpl-dispatcher multiproc-send parallel parse_json regex rename sleep split stats tag tailf where wrap write-append write ws_bcast xpath zmq_pub zmq_push","title":"StreamingCommand"}]}